 Explicación del código paso a paso:

1. Declaración de variables y constantes

private static final int DIAS = 30;
private static final int FRANJAS = 4;
private static int[][] matriz = new int[DIAS][FRANJAS];

    DIAS = 30: Se define una constante para representar los 30 días del mes.
    FRANJAS = 4: Se define otra constante para representar las cuatro franjas horarias en las que se divide cada día:
        0-6 horas
        6-12 horas
        12-18 horas
        18-24 horas
    matriz[DIAS][FRANJAS]: Es una matriz bidimensional donde cada fila representa un día y cada columna representa una franja horaria. Esta matriz almacenará la cantidad de vehículos que pasaron en cada franja horaria por día.

2. Método main: Punto de entrada del programa

public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    llenarMatriz();
    mostrarEncabezado();
    generarReporteDiario(scanner);
    calcularPromedioPorFranja();
    determinarDiasMayorMenorCirculacion();
    scanner.close();
}

    Se crea un objeto Scanner para leer datos ingresados por el usuario.
    Se llama a los métodos que ejecutan las diferentes funcionalidades del programa:
        llenarMatriz() → Llena la matriz con valores aleatorios simulando el tráfico diario.
        mostrarEncabezado() → Muestra un título decorativo para la aplicación.
        generarReporteDiario(scanner) → Pide un día al usuario y muestra el tráfico de ese día.
        calcularPromedioPorFranja() → Calcula el promedio de vehículos por franja horaria en todo el mes.
        determinarDiasMayorMenorCirculacion() → Determina qué día tuvo más y menos tráfico.

3. Método llenarMatriz(): Llena la matriz con valores aleatorios

private static void llenarMatriz() {
    for (int i = 0; i < DIAS; i++) {
        for (int j = 0; j < FRANJAS; j++) {
            matriz[i][j] = (j == 0 || j == 3) ? (int) (Math.random() * 71) + 10 : (int) (Math.random() * 91) + 60;
        }
    }
}

    Objetivo: Rellena la matriz con datos aleatorios de vehículos en cada franja horaria.
    Lógica:
        Usa Math.random() para generar números aleatorios dentro de un rango determinado.
        Para las franjas 0-6 y 18-24 horas: Se generan entre 10 y 80 vehículos (menos tráfico).
        Para las franjas 6-12 y 12-18 horas: Se generan entre 60 y 150 vehículos (más tráfico, suponiendo que estas horas son más transitadas).

4. Método mostrarEncabezado(): Muestra un título en pantalla

private static void mostrarEncabezado() {
    System.out.println("------------------------------");
    System.out.println(" reporte de vehiculos peaje ");
    System.out.println("------------------------------");
}

    Objetivo: Imprime un encabezado decorativo para que el usuario sepa qué hace el programa.

5. Método generarReporteDiario(scanner): Muestra el tráfico de un día específico

private static void generarReporteDiario(Scanner scanner) {
    System.out.print("ingrese un numero de dia (1-30): ");
    int dia = scanner.nextInt();

    Objetivo: Permite al usuario ingresar un día del mes (1-30) y muestra la cantidad de vehículos en cada franja horaria.

    if (dia >= 1 && dia <= DIAS) {
        System.out.println("\n------------------------------");
        System.out.println(" reporte del dia " + dia);
        System.out.println("------------------------------");
        System.out.println("hora 0-6   hora 6-12   hora 12-18   hora 18-24");
        System.out.println("----------------------------------------------");
        System.out.println(matriz[dia-1][0] + "          " + matriz[dia-1][1] + "          " + matriz[dia-1][2] + "          " + matriz[dia-1][3]);

    Se valida que el usuario ingrese un día válido (1-30).
    Se imprimen los datos del tráfico en las diferentes franjas horarias de ese día.

        int franja_00_12 = matriz[dia-1][0] + matriz[dia-1][1];
        int franja_12_24 = matriz[dia-1][2] + matriz[dia-1][3];
        System.out.println("----------------------------------------------");
        System.out.println("00-12 total: " + franja_00_12);
        System.out.println("12-24 total: " + franja_12_24);

    También se calcula el total de vehículos en dos grandes rangos horarios:
        00-12 horas (sumando las dos primeras franjas).
        12-24 horas (sumando las dos últimas franjas).

Si el usuario ingresa un número fuera del rango, muestra un mensaje de error:

    } else {
        System.out.println("dia fuera de rango.");
    }

6. Método calcularPromedioPorFranja(): Calcula el tráfico promedio por franja

private static void calcularPromedioPorFranja() {
    double[] sumaFranja = new double[FRANJAS];

    for (int i = 0; i < DIAS; i++) {
        for (int j = 0; j < FRANJAS; j++) {
            sumaFranja[j] += matriz[i][j];
        }
    }

    Se suman los valores de cada franja para todos los días.
    Luego, se calcula el promedio dividiendo la suma total entre DIAS.

    System.out.println("\n------------------------------");
    System.out.println(" promedio de vehiculos por franja ");
    System.out.println("------------------------------");
    System.out.println("hora 0-6   hora 6-12   hora 12-18   hora 18-24");
    System.out.println("----------------------------------------------");
    System.out.println((int)(sumaFranja[0] / DIAS) + "          " + (int)(sumaFranja[1] / DIAS) + "          " + (int)(sumaFranja[2] / DIAS) + "          " + (int)(sumaFranja[3] / DIAS));
}

    Se imprimen los promedios de vehículos en cada franja horaria.

7. Método determinarDiasMayorMenorCirculacion(): Encuentra los días con más y menos tráfico

private static void determinarDiasMayorMenorCirculacion() {
    int[] totalDia = new int[DIAS];
    int mayor = 0, menor = Integer.MAX_VALUE, diaMayor = 1, diaMenor = 1;

    Se inicializan variables para rastrear los días con más (mayor) y menos (menor) tráfico.

    for (int i = 0; i < DIAS; i++) {
        totalDia[i] = matriz[i][0] + matriz[i][1] + matriz[i][2] + matriz[i][3];

    Se suman los vehículos de cada día.

        if (totalDia[i] > mayor) {
            mayor = totalDia[i];
            diaMayor = i + 1;
        }
        if (totalDia[i] < menor) {
            menor = totalDia[i];
            diaMenor = i + 1;
        }
    }

    Se actualizan los días con más y menos tráfico.
